using Git.Framework.DataTypes;
using Git.Framework.DataTypes.ExtensionMethods;
using Git.Framework.Log;
using Git.Mes.HikRobot.SDK;
using Git.Mes.HikRobot.SDK.ApiName;
using Git.Mes.HikRobot.SDK.Model;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web.Http;

namespace Git.HikAgv.App.Server
{
    public partial class AgvCallbackServiceController : ApiController
    {
        private Log log = Log.Instance(typeof(AgvCallbackServiceController));

        /// <summary>
        /// 测试连接
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        public HikDataResult TestAgv()
        {
            HikDataResult HikDataResult = new HikDataResult();
            HikDataResult.code = (int)EHikResponseCode.Success;
            HikDataResult.message = "测试连接成功";
            return HikDataResult;
        }

        /// <summary>
        /// AGV 执行回调的方法，包含任务开始，走出储位，任务完成及任务取消。取消通知为任务单，其他通知为单个任务组或子任务。
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        [HttpPost]
        public HikDataResult<string> AgvCallback([FromBody] TaskCallbackDTO entity)
        {
            HikDataResult<string> HikDataResult = new HikDataResult<string>();
            log.Info("AGV 执行回调的方法: " + HikJsonHelper.SerializeObject(entity));

            string reqCode = entity.reqCode;                            //请求唯一编号
            string currentPositionCode = entity.currentPositionCode;    //当前所在的地图坐标
            string podCode = entity.podCode;                            //AGV搬运的货架编号
            string method = entity.method;                              //参数方法，用于各个模板回传的参数判断
            string robotCode = entity.robotCode;                        //AGV编号

            //坐标转换
            List<PositionEntity> ListMap = DomainContext.ListMap;
            ListMap = ListMap.IsNull() ? new List<PositionEntity>() : ListMap;

            if (currentPositionCode.IsNotEmpty())
            {
                PositionEntity Position = ListMap.FirstOrDefault(item => item.PositionCode == currentPositionCode);
                if (Position == null)
                {
                    HikDataResult.code = (int)EHikResponseCode.Exception;
                    HikDataResult.message = string.Format("{0}:对应的坐标点数据配置不正确, 请核对", currentPositionCode);
                    return HikDataResult;
                }
            }

            if (method == "btnStartOne")
            {
                //按钮呼叫开始触发
            }
            else if (method == "btnStartTwo")
            {
                //按钮呼叫开始触发
            }
            else if (method == "btnEndOne")
            {
                /**
                 * 呼叫按钮调度AGV任务结束，AGV运行到第一个待命点停止之后触发，需要做如下几件事:
                 * 1 根据基础数据中货架的位置信息
                 * 2 更新基础数据中坐标中货架的信息
                 * 3 判断当前坐标是否为申请单的第一个点
                 * 4 判断那个码垛位已经准备好，且创建搬运任务
                 * */
                if (entity.currentPositionCode.IsNotEmpty())
                {
                    GenTaskRequestDTO StartModel = new GenTaskRequestDTO();
                    StartModel.reqCode = ConvertHelper.NewGuid().SubString(25);
                    StartModel.reqTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                    StartModel.clientCode = "WMS";
                    StartModel.taskTyp = "T02";
                    StartModel.agvCode = robotCode;
                    StartModel.podCode = podCode;

                    //StartModel.positionCodePath = new List<PositionDTO>()
                    //{
                    //    new PositionDTO(){ positionCode=entity.currentPositionCode,type="00" },
                    //};

                    StartModel.positionCodePath = new List<PositionDTO>();

                    PositionEntity TargetBin = ListMap.Where(item => item.PositionName == "A-1" || item.PositionName == "A-2")
                        .Where(item => item.HasCon == (int)EHikBool.No && item.PodCode.IsEmpty())
                        .FirstOrDefault();
                    if (TargetBin != null)
                    {
                        StartModel.positionCodePath.Add(new PositionDTO() { positionCode = TargetBin.PositionCode, type = "00" });
                    }
                    log.Info("第一条生产线搬运控制权转移A: " + HikJsonHelper.SerializeObject(StartModel));
                    if (TargetBin != null)
                    {
                        log.Info("第一条生产线搬运控制权转移: " + HikJsonHelper.SerializeObject(StartModel));
                        IHikTopClient client = new HikTopClientDefault();
                        JObject param = JObject.Parse(HikJsonHelper.SerializeObject(StartModel));
                        string Content = client.Execute(TaskApiName.TaskApiName_genAgvSchedulingTask, param);
                        log.Info("第一条生产线搬运控制权转移下发任务结果:"+Content);
                    }
                } 
            }
            else if (method == "btnEndTwo")
            {
                /**
                 * 呼叫按钮调度AGV任务结束，AGV运行到第一个待命点停止之后触发，需要做如下几件事:
                 * 1 根据基础数据中货架的位置信息
                 * 2 更新基础数据中坐标中货架的信息
                 * 3 判断当前坐标是否为申请单的第一个点
                 * 4 判断那个码垛位已经准备好，且创建搬运任务
                 * */
                if (entity.currentPositionCode.IsNotEmpty())
                {
                    GenTaskRequestDTO StartModel = new GenTaskRequestDTO();
                    StartModel.reqCode = ConvertHelper.NewGuid().SubString(25);
                    StartModel.reqTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                    StartModel.clientCode = "WMS";
                    StartModel.taskTyp = "T02";
                    StartModel.agvCode = robotCode;
                    StartModel.podCode = podCode;
                    //StartModel.positionCodePath = new List<PositionDTO>()
                    //{
                    //    new PositionDTO(){ positionCode=entity.currentPositionCode,type="00" },
                    //};
                    StartModel.positionCodePath = new List<PositionDTO>();

                    PositionEntity TargetBin = ListMap.Where(item => item.PositionName == "C-1" || item.PositionName == "C-2").Where(item => item.HasCon == (int)EHikBool.No && item.PodCode.IsEmpty()).FirstOrDefault();
                    if (TargetBin != null)
                    {
                        StartModel.positionCodePath.Add(new PositionDTO() { positionCode = TargetBin.PositionCode, type = "00" });
                    }
                    log.Info("第二条生产线搬运控制权转移B: " + HikJsonHelper.SerializeObject(StartModel));
                    if (TargetBin != null)
                    {
                        log.Info("第二条生产线搬运控制权转移: " + HikJsonHelper.SerializeObject(StartModel));
                        IHikTopClient client = new HikTopClientDefault();
                        JObject param = JObject.Parse(HikJsonHelper.SerializeObject(StartModel));
                        string Content = client.Execute(TaskApiName.TaskApiName_genAgvSchedulingTask, param);
                        log.Info("第二条生产线搬运控制权转移下发任务结果:" + Content);
                    }
                }  
            }
            else if (method == "autoEnd")
            {
                //更新地图和AGV状态
                LoadMapServer MapServer = new LoadMapServer();
                MapServer.UpdateBin();
                //MapServer.QueryAgv();

                //进入码垛区之后回复机械手的码垛状态
                PositionEntity CurrentBin = ListMap.Where(item => item.PositionCode == currentPositionCode).FirstOrDefault();
                if (CurrentBin == null)
                {
                    HikDataResult.code = (int)EHikResponseCode.Exception;
                    HikDataResult.reqCode = reqCode;
                    HikDataResult.message = string.Format("{0}:对应的坐标点数据配置不正确, 请核对", currentPositionCode);
                    return HikDataResult;
                }

                InovanceModbusClient ModbusClient = DomainContext.ModbusClient;

                if (CurrentBin.PositionName == "A-1")
                {
                    DomainContext.Interactive_One.DB_RobotToAgv_Palletizing_Left_TotalNum = 0;
                    DomainContext.Interactive_One.DB_RobotToAgv_Palletizing_Left_Num = 0;

                    ModbusClient.Write_Palletizing_Notify(CurrentBin.PositionCode,1);
                }
                else if (CurrentBin.PositionName == "A-2")
                {
                    DomainContext.Interactive_One.DB_RobotToAgv_Palletizing_Right_TotalNum = 0;
                    DomainContext.Interactive_One.DB_RobotToAgv_Palletizing_Right_Num = 0;

                    ModbusClient.Write_Palletizing_Notify(CurrentBin.PositionCode, 2);
                }
                else if (CurrentBin.PositionName == "C-1")
                {
                    DomainContext.Interactive_Two.DB_RobotToAgv_Palletizing_Left_TotalNum = 0;
                    DomainContext.Interactive_Two.DB_RobotToAgv_Palletizing_Left_Num = 0;

                    ModbusClient.Write_Palletizing_Notify(CurrentBin.PositionCode, 1);
                }
                else if (CurrentBin.PositionName == "C-2")
                {
                    DomainContext.Interactive_Two.DB_RobotToAgv_Palletizing_Right_TotalNum = 0;
                    DomainContext.Interactive_Two.DB_RobotToAgv_Palletizing_Right_Num = 0;

                    ModbusClient.Write_Palletizing_Notify(CurrentBin.PositionCode, 2);
                }

                //判断是否有需要搬运的任务，如果有则自动生成搬运任务，如果没有则回到内部申请点 
                MapServer.StartTask(reqCode, currentPositionCode, method, robotCode, podCode);
            }

            HikDataResult.code = 0;
            HikDataResult.reqCode = entity.reqCode;
            HikDataResult.message = "响应成功";

            return HikDataResult;
        }

        /// <summary>
        /// 告警推送回调的方法，调度系统将导致 AGV 停止运行的严重告警推送给上层系统 推送频率：10 秒一次
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        [HttpPost]
        public HikDataResult WarnCallback([FromBody] WarnCallbackRequestDTO entity)
        {
            HikDataResult HikDataResult = new HikDataResult();
            log.Info("告警推送回调的方法: " + HikJsonHelper.SerializeObject(entity));
            return HikDataResult;
        }

        /// <summary>
        /// 可在执行绑定货架与储位,绑定货架与物料,绑定仓位与容器后通知上层
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        [HttpPost]
        public HikDataResult BindNotify([FromBody] BindNotifyRequestDTO entity)
        {
            HikDataResult HikDataResult = new HikDataResult();
            log.Info("可在执行绑定货架与储位,绑定货架与物料,绑定仓位与容器后通知上层: " + HikJsonHelper.SerializeObject(entity));
            return HikDataResult;
        }
    }
}
